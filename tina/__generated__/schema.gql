# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  blip(relativePath: String): Blip!
  blipConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlipFilter): BlipConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  review(relativePath: String): Review!
  reviewConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ReviewFilter): ReviewConnection!
}

input DocumentFilter {
  blip: BlipFilter
  post: PostFilter
  review: ReviewFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Blip | Post | Review | Folder

type Blip implements Node & Document {
  title: String!
  pubDate: String!
  tags: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input BlipFilter {
  title: StringFilter
  pubDate: StringFilter
  tags: StringFilter
  body: RichTextFilter
}

type BlipConnectionEdges {
  cursor: String!
  node: Blip
}

type BlipConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlipConnectionEdges]
}

type Post implements Node & Document {
  title: String!
  pubDate: String!
  tags: [String]
  summary: String!
  socialImageFilename: String!
  cloudinaryThumb: String!
  thumb: String!
  thumbAlt: String!
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostFilter {
  title: StringFilter
  pubDate: StringFilter
  tags: StringFilter
  summary: StringFilter
  socialImageFilename: StringFilter
  cloudinaryThumb: StringFilter
  thumb: StringFilter
  thumbAlt: StringFilter
  body: RichTextFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Review implements Node & Document {
  title: String!
  pubDate: String!
  tags: [String]
  description: String!
  address: String!
  city: String!
  state: String!
  country: String!
  coordinates: String!
  infoUrl: String!
  heroImageAlt: String!
  heroImage: String!
  heroImageAttribution: String
  heroImageUrl: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ReviewFilter {
  title: StringFilter
  pubDate: StringFilter
  tags: StringFilter
  description: StringFilter
  address: StringFilter
  city: StringFilter
  state: StringFilter
  country: StringFilter
  coordinates: StringFilter
  infoUrl: StringFilter
  heroImageAlt: StringFilter
  heroImage: StringFilter
  heroImageAttribution: StringFilter
  heroImageUrl: StringFilter
  body: RichTextFilter
}

type ReviewConnectionEdges {
  cursor: String!
  node: Review
}

type ReviewConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ReviewConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateBlip(relativePath: String!, params: BlipMutation!): Blip!
  createBlip(relativePath: String!, params: BlipMutation!): Blip!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateReview(relativePath: String!, params: ReviewMutation!): Review!
  createReview(relativePath: String!, params: ReviewMutation!): Review!
}

input DocumentUpdateMutation {
  blip: BlipMutation
  post: PostMutation
  review: ReviewMutation
  relativePath: String
}

input DocumentMutation {
  blip: BlipMutation
  post: PostMutation
  review: ReviewMutation
}

input BlipMutation {
  title: String
  pubDate: String
  tags: [String]
  body: JSON
}

input PostMutation {
  title: String
  pubDate: String
  tags: [String]
  summary: String
  socialImageFilename: String
  cloudinaryThumb: String
  thumb: String
  thumbAlt: String
  body: JSON
}

input ReviewMutation {
  title: String
  pubDate: String
  tags: [String]
  description: String
  address: String
  city: String
  state: String
  country: String
  coordinates: String
  infoUrl: String
  heroImageAlt: String
  heroImage: String
  heroImageAttribution: String
  heroImageUrl: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
