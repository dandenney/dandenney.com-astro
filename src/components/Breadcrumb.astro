---
interface BreadcrumbItem {
  label: string;
  href?: string;
}

interface Props {
  items: BreadcrumbItem[];
  class?: string;
}

const { items, class: className = '' } = Astro.props;
---

<nav aria-label="Breadcrumb" class={`breadcrumb ${className}`}>
  <ol class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
    <li>
      <a 
        href="/" 
        class="hover:text-red-700 dark:hover:text-red-400 transition-colors"
        aria-label="Home"
      >
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
        </svg>
        <span class="sr-only">Home</span>
      </a>
    </li>
    
    {items.map((item, index) => (
      <li class="flex items-center">
        <svg class="w-4 h-4 text-gray-400 mx-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
        </svg>
        
        {item.href && index < items.length - 1 ? (
          <a 
            href={item.href} 
            class="hover:text-red-700 dark:hover:text-red-400 transition-colors"
          >
            {item.label}
          </a>
        ) : (
          <span class="font-medium text-gray-900 dark:text-gray-100" aria-current="page">
            {item.label}
          </span>
        )}
      </li>
    ))}
  </ol>
</nav>

<style>
  .breadcrumb {
    @apply mb-6 px-6 lg:px-8;
  }
  
  .breadcrumb ol {
    @apply max-w-7xl mx-auto;
  }
</style>